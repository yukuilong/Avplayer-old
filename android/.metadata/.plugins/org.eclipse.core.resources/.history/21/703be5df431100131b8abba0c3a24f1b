#include "player_impl.h"
#include <android/log.h>

//////////////////////////////////////////////////////////////////////////

//#include <unstd.h>

#include <sys/stat.h>

int64_t GetFileLen( const char *_pName )
{

	struct stat st;

	if(stat(_pName, &st) < 0)
	{
		return -1;
	}

	return st.st_size;

}


//////////////////////////////////////////////////////////////////////////
// 以下代码为播放器相关的实现.

// 用于第一次得到正确宽高信息的定时器.
#define ID_PLAYER_TIMER		1021

player_impl::player_impl(void)
	: m_avplay(NULL)
	, m_video(NULL)
	, m_audio(NULL)
	, m_source(NULL)
	, m_cur_index(-1)
	, m_video_width(0)
	, m_video_height(0)
	, m_window(NULL)
	, m_mutex(PTHREAD_MUTEX_INITIALIZER)
	, m_mute(false)
{

}

player_impl::~player_impl(void)
{
	if(m_window)
	{
		JNIEnv *jenv=NULL;
		jenv=av_get_jni_env();
		jenv->DeleteGlobalRef((jobject)m_window);
	}
}

void player_impl::set_window_handle(unsigned long window)
{
	JNIEnv *jenv=NULL;
	jenv=av_get_jni_env();
	m_window = (unsigned long)jenv->NewGlobalRef((jobject)window);
}
unsigned int player_impl::get_window_handle()
{
	return m_window;
}

void player_impl::init_file_source(source_context *sc)
{
	sc->init_source = file_init_source;
	sc->read_data = file_read_data;
	sc->read_seek = file_read_seek;
	sc->close = file_close;
	sc->destory = file_destory;
}

void player_impl::init_torrent_source(source_context *sc)
{
	sc->init_source = bt_init_source;
	sc->read_data = bt_read_data;
	sc->read_seek = bt_read_seek;
	sc->read_seek = bt_read_seek;
	sc->close = bt_close;
	sc->destory = bt_destory;
}

void player_impl::init_yk_source(source_context *sc)
{
    sc->init_source = yk_init_source;
    sc->read_data = yk_read_data;
    sc->read_seek = yk_read_seek;
    sc->close = yk_close;
    sc->destory = yk_destory;
}

void player_impl::init_audio(ao_context *ao)
{
	ao->init_audio = android_init_audio;
	ao->play_audio = android_play_audio;
	ao->audio_control = android_audio_control;
	ao->mute_set = android_mute_set;
	ao->destory_audio = android_destory_audio;
}

void player_impl::init_video(vo_context *vo, int render_type)
{
	int ret = 0;

	if (render_type == RENDER_ANDROID_OGL)
	{
		ret = android_gles_init_video(vo, video_width(), video_height(), PIX_FMT_YUV420P);
		if(ret == 0)
		{
			vo->init_video = android_gles_init_video;
			m_draw_frame = android_gles_render_one_frame;
			vo->re_size = android_gles_re_size;
			vo->aspect_ratio = android_gles_aspect_ratio;
			vo->use_overlay = android_gles_use_overlay;
			vo->destory_video = android_gles_destory_render;
			vo->render_one_frame = &player_impl::draw_frame;

			::logger("init video render to android opengles.\n");
		}


	}


	// 保存this为user_ctx.
	vo->user_ctx = (void*)this;
}

bool player_impl::open(const char *movie, int media_type, int render_type)
{
	// 如果未关闭原来的媒体, 则先关闭.
	if (m_avplay || m_source)
		close();

	// 未创建窗口, 无法播放, 返回失败.
	if (!m_window)
		return false;

	char filename[MAX_PATH];
	int len = strlen(movie) + 1;

	strcpy(filename, movie);

	int64_t file_lentgh = 0;
	if (media_type == MEDIA_TYPE_FILE || media_type == MEDIA_TYPE_BT)
	{
		file_lentgh = GetFileLen(movie);
		__android_log_print(ANDROID_LOG_INFO,"open","%s   %d\n",movie,file_lentgh);
		if (file_lentgh < 0)
		{
			::logger("get file size failed!\n");
			return false;
		}
	}

	do {
		// 创建avplay.
		m_avplay = alloc_avplay_context();
		if (!m_avplay)
		{
			::logger("allocate avplay context failed!\n");
			break;
		}

		// 为avplay创建demux.
		demux_context *demux = alloc_demux_context();
		configure(m_avplay, demux, MEDIA_DEMUX);

		// 目前只有除youku之外, 都使用generic_demux.
		if (media_type != MEDIA_TYPE_YK)
		{
			demux->init_demux = generic_init_demux;
			demux->read_packet = generic_read_packet;
			demux->seek_packet = generic_packet_seek;
			demux->read_pause = generic_read_pause;
			demux->read_play = generic_read_play;
			demux->stream_index = generic_stream_index;
			demux->query_avcodec_id = generic_query_avcodec_id;
			demux->destory = generic_destory;
		}
		else
		{
			// TODO: 实现youku相关的demux.
			break;
		}

		// 初始化avplay.
		if (initialize(m_avplay, filename, media_type, demux) != 0)
		{
			::logger("initialize avplay failed!\n");
			break;
		}

		// TODO: 如果是bt类型, 则在此得到视频文件列表, 并添加到m_media_list.
		// if (media_type == MEDIA_TYPE_BT)
		// {
		// 	bt_source_info *bt_info = &m_avplay->m_source_ctx->info.bt;
		// 	for (int i = 0; i < bt_info->info_size; i++)
		// 	{
		// 		std::string name = std::string(bt_info->info[i].file_name);
		// 		m_media_list.insert(std::make_pair(filename, name));
		// 	}
		// }

		// 分配音频和视频的渲染器.
		m_audio = alloc_audio_render();
		if (!m_audio)
		{
			::logger("allocate audio render failed!\n");
			break;
		}

		m_video = alloc_video_render(&m_window);
		if (!m_video)
		{
			::logger("allocate video render failed!\n");
			break;
		}

		// 初始化音频和视频渲染器.
		init_audio(m_audio);
		init_video(m_video, render_type);

		// 配置音频视频渲染器.
		configure(m_avplay, m_video, VIDEO_RENDER);
		configure(m_avplay, m_audio, AUDIO_RENDER);

		// 得到视频宽高.
		if (m_avplay->m_video_ctx)
		{
			m_video_width = m_avplay->m_video_ctx->width;
			m_video_height = m_avplay->m_video_ctx->height;
		}

		// 打开视频实时码率和帧率计算.
		enable_calc_frame_rate(m_avplay);
		enable_calc_bit_rate(m_avplay);
		__android_log_print(ANDROID_LOG_INFO,"m_window--","%d\n",m_window);

		return true;

	} while (0);

	if (m_avplay)
		free_avplay_context(m_avplay);
	m_avplay = NULL;
	if (m_source)
		free_media_source(m_source);
	if (m_audio)
		free_audio_render(m_audio);
	if (m_video)
		free_video_render(m_video);

	::logger("open avplay failed!\n");

	return true;
}

bool player_impl::play(double fact/* = 0.0f*/, int index /*= 0*/)
{
	// 重复播放, 返回错误.
	if (m_cur_index == index)
		return false;

	// 如果是文件数据, 则直接播放.
	if (::av_start(m_avplay, fact, index) != 0)
		return false;

	m_cur_index = index;
	::logger("play\n");
	return true;
}

bool player_impl::pause()
{
	if (m_avplay && m_avplay->m_play_status == playing)
	{
		::av_pause(m_avplay);
		::logger("set to pause.\n");
		return true;
	}

	return false;
}

bool player_impl::resume()
{
	if (m_avplay && m_avplay->m_play_status == paused)
	{
		::av_resume(m_avplay);
		::logger("set to resume.\n");
		return true;
	}

	return false;
}

bool player_impl::stop()
{
	if (m_avplay)
	{
		::av_stop(m_avplay);
		m_cur_index = -1;
		::logger("stop play.\n");
		return true;
	}

	return false;
}

bool player_impl::wait_for_completion()
{
	if (m_avplay)
	{
		::wait_for_completion(m_avplay);
		::logger("play completed.\n");
		return true;
	}

	return false;
}

bool player_impl::close()
{
	bool ret = false;

	pthread_mutex_lock(&m_mutex);
	if (m_avplay)
	{
		::av_destory(m_avplay);
		m_avplay = NULL;	// 清空指针, 避免下一次重新open时出错.
		m_source = NULL;	// m_source 在 read_pkt_thrd 线程退出时, 会自动释放, 这里只需要简单清空即可.
		m_cur_index = -1;
		::logger("close avplay.\n");
		ret = true;
	}
	else
	{
		// m_avplay已经不存在, 手动释放m_source.
		if (m_source)
		{
			free_media_source(m_source);
			m_source = NULL;
		}
	}
	pthread_mutex_lock(&m_mutex);

	return ret;
}

void player_impl::seek_to(double fact)
{
	if (m_avplay)
	{
		::av_seek(m_avplay, fact);
		::logger("seek to %.2f.\n", fact);
	}
}

void player_impl::volume(double l, double r)
{
	if (m_avplay)
	{
		::av_volume(m_avplay, l, r);
		::logger("set volume to left: %.2f, right: %.2f.\n", l, r);
	}
}

double player_impl::curr_play_time()
{
	return ::av_curr_play_time(m_avplay);
}

double player_impl::duration()
{
	if (!m_avplay)
		return -1.0f;
	return ::av_duration(m_avplay);
}

int player_impl::video_width()
{
	if (!m_avplay || !m_avplay->m_base_info)
		return 0;
	return m_avplay->m_base_info->width;
}

int player_impl::video_height()
{
	if (!m_avplay || !m_avplay->m_base_info)
		return 0;
	return m_avplay->m_base_info->height;
}

double player_impl::buffering()
{
	if (!m_avplay)
		return 0.0f;
	return ::buffering(m_avplay);
}

std::map<std::string, std::string>& player_impl::play_list()
{
	return m_media_list;
}

int player_impl::draw_frame(struct vo_context *ctx, AVFrame* data, int pix_fmt, double pts)
{
	vo_context *vo = (vo_context*)ctx;
	player_impl *this_ptr = (player_impl*)vo->user_ctx;

	// 实际渲染.
	return this_ptr->m_draw_frame(ctx, data, pix_fmt, pts);
}

int player_impl::download_rate()
{
	if (m_source)
		return m_source->dl_info.speed;
	return -1;
}

void player_impl::set_download_rate(int k)
{
	if (m_source)
		m_source->dl_info.limit_speed = k;
}

void player_impl::toggle_mute()
{
	if (m_avplay)
	{
		m_mute = !m_mute;
		::av_mute_set(m_avplay, m_mute);
	}
}

void player_impl::mute_set(bool s)
{
	if (m_avplay)
	{
		m_mute = s;
		::av_mute_set(m_avplay, s);
	}
}
